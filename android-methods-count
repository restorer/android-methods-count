#!/usr/bin/env ruby

require 'fileutils'
require 'tmpdir'
require 'net/http'
require 'optparse'

class MethodCounter
    class ExpectedError < RuntimeError
    end

    def initialize
        @option_parser = OptionParser.new do |opts|
            # opts.banner = "Usage: #{File.basename(__FILE__)} [options] <jar|aar|apk|artifact>"
            opts.separator ''
            opts.on('--sdk [SDK_DIR]', 'Path to Android SDK', '(if not specified, $ANDROID_HOME will be used)') { |o| @options[:sdk] = o }
            opts.separator ''
            opts.on('--tools [VERSION]', 'Build tools version', '(if not specified, latest available will be used)') { |o| @options[:tools] = o }
            opts.separator ''
            opts.on('--dx [DX_PATH]', 'Specify "dx" path directly', '(overrides "--sdk" and "--tools")') { |o| @options[:dx] = o }
            opts.separator ''

            opts.on_tail('-h', '--help', 'Show this message') do
                puts opts
                exit
            end

            opts.on_tail('-v', '--version', 'Show version') do
                puts '1.0.0'
                exit
            end
        end
    end

    def resolve_sdk_path
        if @options.key?(:sdk)
            path = @options[:sdk]
            raise ExpectedError.new("Couldn't find Android SDK path at \"#{path}\" (resolved via \"--sdk\" option)") unless Dir.exists?(path)
            return path
        end

        if @env.key?('ANDROID_HOME')
            path = @env['ANDROID_HOME']
            raise ExpectedError.new("Couldn't find Android SDK path at \"#{path}\" (resolved via \"$ANDROID_HOME\")") unless Dir.exists?(path)
            return path
        end

        raise ExpectedError.new("Couldn't resolve Android SDK path, neither from \"--sdk\" option nor from $ANDROID_HOME")
    end

    def resolve_build_tools_path
        base_path = File.join(resolve_sdk_path, "build-tools")
        raise ExpectedError.new("Couldn't find build-tools folder at \"#{base_path}\"") unless Dir.exists?(base_path)

        if @options.key?(:tools)
            path = File.join(base_path, @options[:tools])
            raise ExpectedError.new("Couldn't find build-tools at \"#{path}\" (resolved via \"--tools\" option)") unless Dir.exists?(path)
            return path
        end

        avail_versions = []

        Dir.foreach(base_path) do |name|
            avail_versions << name if Dir.exists?(File.join(base_path, name)) unless name =~ /^\./
        end

        raise ExpectedError.new("Couldn't find any installed build-tools at \"#{base_path}\"") if avail_versions.empty?
        return File.join(base_path, avail_versions.sort_by { |v| Gem::Version.new(v) }.last)
    end

    def resolve_dx_path
        if @options.key?(:dx)
            path = @options[:dx]
            raise ExpectedError.new("Couldn't find \"dx\" tool at \"#{path}\" (resolved via \"--dx\" option)") unless File.exists?(path)
            return path
        end

        path = File.join(resolve_build_tools_path, "dx")
        raise ExpectedError.new("Couldn't find \"dx\" tool at \"#{path}\"") unless File.exists?(path)
        return path
    end

    def resolve_unzip_path
        path = %x[ which unzip ].strip
        raise ExpectedError.new("Couldn't find \"unzip\"") if path.empty?
        return path
    end

    def run_dx(jar_path, dest_path)
        puts "Dexing #{File.basename(jar_path)}"
        %x[ "#{resolve_dx_path}" --dex --output="#{dest_path}" "#{jar_path}" ]
        return dest_path
    end

    def run_unzip(zip_path, dest_dir)
        puts "Unzipping #{File.basename(zip_path)}"
        FileUtils.mkdir_p(dest_dir)
        %x[ "#{resolve_unzip_path}" -q "#{zip_path}" -d "#{dest_dir}" ]
    end

    def count_dex_methods(dex_path)
        # TODO: do it in a native way
        return ` cat "#{dex_path}" | head -c 92 | tail -c 4 | hexdump -e '1/4 "%d\n"' `.to_i
    end

    def count_artifact_methods(path)
        dex_dir = File.join(@work_dir, "dex")
        FileUtils.mkdir_p(dex_dir)

        ext = File.extname(path)
        dex_list = []

        case ext.downcase
            when ".jar"
                dex_list << run_dx(path, File.join(dex_dir, "classes.dex"))

            when ".aar"
                aar_dir = File.join(@work_dir, "aar")
                libs_dir = File.join(aar_dir, "libs")

                run_unzip(path, aar_dir)
                dex_list << run_dx(File.join(aar_dir, "classes.jar"), File.join(dex_dir, "main_classes.dex"))

                if Dir.exists?(libs_dir)
                    Dir.foreach(libs_dir) do |name|
                        next unless File.extname(name).downcase === ".jar"

                        simple_name = File.basename(name, File.extname(name))
                        dex_list << run_dx(File.join(libs_dir, name), File.join(dex_dir, "libs_#{simple_name}.dex"))
                    end
                end

            when ".apk"
                run_unzip(path, dex_dir)

                Dir.foreach(dex_dir) do |name|
                    dex_list << File.join(dex_dir, name) if File.extname(name).downcase === ".dex"
                end

            else
                raise ExpectedError.new("Doesn't know how to handle \"#{ext}\"")
        end

        raise ExpectedError.new("Internal error: couldn't detect any .dex files") if dex_list.empty?
        total_count = 0

        dex_list.each do |path|
            raise ExpectedError.new("Internal error: \"#{path}\" doesn't exists") unless File.exists?(path)
            total_count += count_dex_methods(path)
        end

        return total_count
    end

    def guess_google_urls(group, artifact, version)
        base = "https://dl.google.com/dl/android/maven2/#{group.gsub('.', '/')}/#{artifact}/#{version}/#{artifact}-#{version}"
        return ["#{base}.aar", "#{base}.jar"]
    end

    def guess_jcenter_urls(group, artifact, version)
        base = "https://jcenter.bintray.com/#{group.gsub('.', '/')}/#{artifact}/#{version}/#{artifact}-#{version}"
        return ["#{base}.aar", "#{base}.jar"]
    end

    def guess_maven_urls(group, artifact, version)
        base = "https://repo.maven.apache.org/maven2/#{group}/#{artifact}/#{version}/#{artifact}-#{version}"
        return ["#{base}.aar", "#{base}.jar"]
    end

    def download_artifact(source)
        parts = source.split(/:/)
        raise ExpectedError.new("Doesn't know how to parse artifact \"#{source}\"") unless parts.size === 3

        download_dir = File.join(@work_dir, "download")
        FileUtils.mkdir_p(download_dir)

        puts "Searching for #{source}"

        group = parts[0]
        artifact = parts[1]
        version = parts[2]

        url_list = []
        url_list.concat(guess_google_urls(group, artifact, version))
        url_list.concat(guess_jcenter_urls(group, artifact, version))
        url_list.concat(guess_maven_urls(group, artifact, version))

        url_list.each do |url|
            uri = URI.parse(url)

            Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme === 'https') do |http|
                http.request(Net::HTTP::Get.new(uri)) do |resp|
                    if resp.is_a?(Net::HTTPOK)
                        puts "Downloading #{url}"
                        result_path = File.join(download_dir, File.basename(uri.path))

                        open(result_path, 'wb') do |io|
                            resp.read_body do |chunk|
                                io.write(chunk)
                            end
                        end

                        return result_path
                    end
                end
            end
        end

        raise ExpectedError.new("Couldn't find group=\"#{group}\", artifact=\"#{artifact}\", version=\"#{version}\"")
    end

    def process(argv, env)
        @options = {}
        @env = env

        argv_left = @option_parser.permute(argv)

        if argv_left.size != 1
            puts @option_parser
            return
        end

        Dir.mktmpdir do |work_dir|
            @work_dir = work_dir
            source = argv_left.first

            begin
                source = download_artifact(source) unless File.exists?(source)
                result = count_artifact_methods(source)

                puts "Methods - #{result}"
            rescue ExpectedError => error
                puts error
            end
        end
    end
end

counter = MethodCounter.new
counter.process(ARGV, ENV)
